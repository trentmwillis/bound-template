var BoundTemplate=function(){"use strict";class t{constructor(t){this._map=t}set(t,e){const s=this._map.get(t);if(s)for(let i=0;i<s.length;i++){const{node:n,originalValue:a,values:o}=s[i];if(n.nodeType===Node.TEXT_NODE)n.textContent=e.toString();else{o.set(t,e.toString());let s=a;for(let[t,e]of o)s=s.replace(`[[${t}]]`,e);n.value=s}}}}class e{constructor(){this._textBindings=[],this._attributeBindings=[]}addTextBinding(t,e){this._textBindings.push({name:t,path:e.slice()})}addAttributeBinding(t,e,s){this._attributeBindings.push({names:t,attrName:e,path:s.slice()})}applyTo(e){const s=new Map;for(let t=0;t<this._textBindings.length;t++){const{name:i,path:n}=this._textBindings[t],a=this.findNodeFromPath(e,n);a.textContent="",s.has(i)||s.set(i,[]),s.get(i).push({node:a})}for(let t=0;t<this._attributeBindings.length;t++){const{names:i,attrName:n,path:a}=this._attributeBindings[t],o=this.findNodeFromPath(e,a).getAttributeNode(n),r={node:o,originalValue:o.value,values:new Map};for(let t=0;t<i.length;t++){const e=i[t];s.has(e)||s.set(e,[]),r.values.set(e,""),s.get(e).push(r)}let l=r.originalValue;for(let[t,e]of r.values)l=l.replace(`[[${t}]]`,e);o.value=l}return new t(s)}findNodeFromPath(t,e){let s=t;for(let t=0;t<e.length;t++)s=s.childNodes[e[t]];return s}}class s{static parse(t){const s=new e;return this.parseNodes(s,t.content.childNodes,[]),s}static parseNodes(t,e,s){for(let i=0;i<e.length;i++)s.push(i),this.parseNode(t,e[i],s),s.pop()}static parseNode(t,e,s){if(e.nodeType===Node.TEXT_NODE)return this.parseTextBindings(t,e,s);e.nodeType===Node.ELEMENT_NODE&&(e.hasAttributes()&&this.parseAttributes(t,e.attributes,s),e.hasChildNodes()&&this.parseNodes(t,e.childNodes,s))}static parseAttributes(t,e,s){for(let i=0;i<e.length;i++)this.parseAttribute(t,e[i],s)}static parseAttribute(t,e,s){const i=new RegExp(this.BINDING_REGEX.source,"g"),n=[];let a;for(;a=i.exec(e.value);)n.push(a[1]);n.length&&t.addAttributeBinding(n,e.name,s)}static parseTextBindings(t,e,s){const i=new RegExp(this.BINDING_REGEX.source,"g").exec(e.textContent);if(i){if(i.index)return void e.splitText(i.index);e.length>i[0].length&&e.splitText(i[0].length);const n=i[1];t.addTextBinding(n,s)}}}s.BINDING_REGEX=/\[\[([a-z0-9]*)\]\]/;class i{constructor(t){this._bindingsFactory=null,this._template=t}create(){this._bindingsFactory||(this._bindingsFactory=s.parse(this._template));const t=this._template.content.cloneNode(!0);return[t,this._bindingsFactory.applyTo(t)]}}return i}();